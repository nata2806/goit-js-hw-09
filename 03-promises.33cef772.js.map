{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAO0G,SAAjGC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKwB,SAAtBO,EAAgBC,GACvBA,EAAQC,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACxBJ,EAAAe,OAAOC,QAAQ,qBAAoCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,IAExDc,OAAM,SAAAJ,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBJ,EAAAe,OAAOI,QAAQ,oBAAmCF,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,IAxB3CgB,SAASC,cAAc,SAC/BC,iBAAiB,UA6B5B,SAAkBC,GAEhBA,EAAIC,iBAUJ,IARA,IACqBC,EAAjBF,EAAIG,cADAC,SAAYvB,EAAKqB,EAALrB,MAAOwB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAG3BC,EAAeC,OAAOF,EAAOG,OAC7BC,EAAaF,OAAOH,EAAKI,OAE3BE,EAAcH,OAAO3B,EAAM4B,OAEtBG,EAAI,EAAGA,GAAKL,EAAcK,GAAK,EAAG,CAGzCxB,EADgBT,EAAciC,EAAGD,IAGjCA,GAAeD,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst promisForm = document.querySelector(\".form\")\npromisForm.addEventListener('submit', onSubmit)\n\n\n// Додаємо до функції створення промісу  сеттаймаут та отримуємо масив значень при успішному і неуспішному виконанняі промісу\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  })\n}\n\n// функція обробки результату промісу\nfunction hendlerPromises(promise) {\n  promise.then(({ position, delay }) => {\n    Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n    .catch(({ position, delay }) => {\n      Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n//Колбек для слухача форми. Отримуємо значення з інпутів, приводимо до числа, створюємо цикл, де на кожній ітерації викликаємо функцію створення  промісу, обробляємо результат через фунуцію обробки, після чого збільшуємо delay на крок \n\nfunction onSubmit(evt) {\n\n  evt.preventDefault();\n\n  const { elements: { delay, step, amount } }\n    = evt.currentTarget;\n\n  const actualAmount = Number(amount.value);\n  const actualStep = Number(step.value);\n\n  let actualDelay = Number(delay.value);\n\n  for (let i = 1; i <= actualAmount; i += 1) {\n\n    const promise = createPromise(i, actualDelay);\n    hendlerPromises(promise);\n\n    actualDelay += actualStep;\n  }\n};"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$hendlerPromises","promise","then","param","Notify","success","concat","catch","failure","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","step","amount","actualAmount","Number","value","actualStep","actualDelay","i"],"version":3,"file":"03-promises.33cef772.js.map"}