{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAO0G,SAAjGC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAKkB,SAAtBO,EAAgBC,GACvBA,EAAQC,MAAK,EAACV,SAAEA,EAAQC,MAAEA,MACxBJ,EAAAc,OAAOC,QAAQ,qBAAqBZ,QAAeC,MAAU,IAE5DY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAc,OAAOG,QAAQ,oBAAoBd,QAAeC,MAAU,G,CAxB/Cc,SAASC,cAAc,SAC/BC,iBAAiB,UA6B5B,SAAkBC,GAEhBA,EAAIC,iBAEJ,MAAQC,UAAUnB,MAAEA,EAAKoB,KAAEA,EAAIC,OAAEA,IAC7BJ,EAAIK,cAEFC,EAAeC,OAAOH,EAAOI,OAC7BC,EAAaF,OAAOJ,EAAKK,OAE/B,IAAIE,EAAcH,OAAOxB,EAAMyB,OAE/B,IAAK,IAAIG,EAAI,EAAGA,GAAKL,EAAcK,GAAK,EAAG,CAGzCrB,EADgBT,EAAc8B,EAAGD,IAGjCA,GAAeD,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst promisForm = document.querySelector(\".form\")\npromisForm.addEventListener('submit', onSubmit)\n\n\n// Додаємо до функції створення промісу  сеттаймаут та отримуємо масив значень при успішному і неуспішному виконанняі промісу\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)\n  })\n}\n\n// функція обробки результату промісу\nfunction hendlerPromises(promise) {\n  promise.then(({ position, delay }) => {\n    Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n    .catch(({ position, delay }) => {\n      Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n//Колбек для слухача форми. Отримуємо значення з інпутів, приводимо до числа, створюємо цикл, де на кожній ітерації викликаємо функцію створення  промісу, обробляємо результат через фунуцію обробки, після чого збільшуємо delay на крок \n\nfunction onSubmit(evt) {\n\n  evt.preventDefault();\n\n  const { elements: { delay, step, amount } }\n    = evt.currentTarget;\n\n  const actualAmount = Number(amount.value);\n  const actualStep = Number(step.value);\n\n  let actualDelay = Number(delay.value);\n\n  for (let i = 1; i <= actualAmount; i += 1) {\n\n    const promise = createPromise(i, actualDelay);\n    hendlerPromises(promise);\n\n    actualDelay += actualStep;\n  }\n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$hendlerPromises","promise","then","Notify","success","catch","failure","document","querySelector","addEventListener","evt","preventDefault","elements","step","amount","currentTarget","actualAmount","Number","value","actualStep","actualDelay","i"],"version":3,"file":"03-promises.432e6aa5.js.map"}